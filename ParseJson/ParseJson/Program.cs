using System;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace ParseJson
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Runtime.Serialization.Json;
    using System.Text;
    using System.Xml;
    using System.Xml.Linq;
    //using System.IO;
    //using System.Text.Json;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    class Program
    {
        static void Main(string[] args)
        {
            string jsonPath = @"C:\Users\JJiao\Desktop\module.json";
            string json = File.ReadAllText(jsonPath);

            dynamic jsonArray = null;
            try
            {
                jsonArray = JsonConvert.DeserializeObject(json);
                jsonArray = jsonArray["extensions"];
                // rename device to EmulatedBrowser
                int cnt = jsonArray.Count;
                EmulatorBrowser[] emulatorBrowser = new EmulatorBrowser [cnt];
                Dictionary<string, object>[] values = new Dictionary<string, object>[cnt];
                for (int i = 0; i < cnt; ++i)
                {
                    emulatorBrowser[i] = new EmulatorBrowser();
                    values[i] = new Dictionary<string, object>();
                    if (jsonArray[i]["device"] == null)
                        continue;

                    emulatorBrowser[i].show_by_default = jsonArray[i]["device"]["show-by-default"];
                    emulatorBrowser[i].Name = jsonArray[i]["device"]["title"];
                    emulatorBrowser[i].userAgent = jsonArray[i]["device"]["user-agent"];
                    emulatorBrowser[i].fit = true;

                    if (jsonArray[i]["device"]["screen"] != null)
                    {
                        emulatorBrowser[i].deviceScaleFactor = jsonArray[i]["device"]["screen"]["device-pixel-ratio"];
                    }
                    if (jsonArray[i]["device"]["screen"] != null && jsonArray[i]["device"]["screen"]["vertical"] != null)
                    {
                        emulatorBrowser[i].width = jsonArray[i]["device"]["screen"]["vertical"]["width"];
                        emulatorBrowser[i].height = jsonArray[i]["device"]["screen"]["vertical"]["height"];
                    }

                    if (jsonArray[i]["device"]["capabilities"] != null)
                    {
                        dynamic cap = jsonArray[i]["device"]["capabilities"];
                        //Console.WriteLine((Type)cap.GetType());
                        if (cap.Count > 0)
                        {
                            foreach (dynamic iter in cap)
                            {
                                dynamic temp = iter;
                                temp = iter == null ? null : iter.ToString();
                                if (temp != null && temp.Equals("touch", StringComparison.InvariantCultureIgnoreCase))
                                {
                                    emulatorBrowser[i].touch = true;
                                }
                                if (temp != null && temp.Equals("mobile", StringComparison.InvariantCultureIgnoreCase))
                                {
                                    emulatorBrowser[i].mobile = true;
                                }
                            }
                        }
                        else
                        {
                            emulatorBrowser[i].touch = false;
                            emulatorBrowser[i].mobile = false;
                        }

                    }

                    //Dictionary<string, object> value = new Dictionary<string, object>();
                    values[i]["EmulatedBrowser"] = emulatorBrowser[i];
                }

                //string jsonData = JsonConvert.SerializeObject(emulatorBrowser);
                //// Print the Json object
                //Console.WriteLine(jsonData);

                //Dictionary<string, object> values = new Dictionary<string, object>();
                //values["EmulatedBrowser"] = emulatorBrowser;
                string res = JsonConvert.SerializeObject(values);

                // Set a variable to the Documents path.
                string docPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                // Write the string array to a new file named "WriteLines.txt".
                using (StreamWriter outputFile = new StreamWriter(Path.Combine(docPath, "WriteLines.json")))
                {
                    outputFile.WriteLine(res);
                }
                Console.WriteLine("json finish");
                string fileName = Path.Combine(docPath, "Latest.xml");
                if(!File.Exists(fileName))
                {
                    Console.WriteLine(fileName + " not exist, will create");
                    File.Create(fileName);
                }
                if (!File.Exists(fileName))
                {
                    Console.WriteLine(fileName + " create failed");
                    return;
                }

                using (var stream = File.OpenRead(Path.Combine(docPath, "WriteLines.json")))
                using (var jsonReader = JsonReaderWriterFactory.CreateJsonReader(stream, XmlDictionaryReaderQuotas.Max))
                {
                    XmlWriterSettings settings = new XmlWriterSettings();
                    settings.ConformanceLevel = ConformanceLevel.Fragment;
                    using (var xmlWriter = XmlWriter.Create(fileName,settings))
                    {
                        settings.Encoding = null;
                        xmlWriter.WriteNode(jsonReader, true);
                    }
                }
     
                Console.WriteLine("xml finish");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            
        }
    }

    public class EmulatorBrowser
    {
        public bool show_by_default;// device["show-by-default"]
        public string Name;// device["title"]
        public long width;// device["screen"]["vertical"]["width"]
        public long height;// device["screen"]["vertical"]["height"]
        public double deviceScaleFactor;// device["screen"]["device-pixel-ratio"]
        public string userAgent;//device["user-agent"]
        public bool touch;// device["capabilities"]["touch"], if exists touch, set it to true, else set it to false
        public bool mobile;// device["capabilities"]["mobile"], if exists mobile, set it to true, else set it to false
        public bool fit;// hard code it as true
    }

    /// <summary>
    /// for test
    /// </summary>
    public class MyAccount
    {
        public Account data { get; set; }
    }
    public class Account
    {
        public string Code { get; set; }
        public string Status { get; set; }
    }

    public class TestDevice
    {
        [JsonProperty("device")]
        public Device device { get; set; }
    }
    public class Device
    {
        [JsonProperty("show-by-default")]
        public bool ShowByDefault { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("screen")]
        public Screen Screen { get; set; }

        [JsonProperty("capabilities")]
        public Capability[] Capabilities { get; set; }

        [JsonProperty("user-agent")]
        public string UserAgent { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("modes")]
        public Mode[] Modes { get; set; }
    }

    public partial class Mode
    {
        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("orientation")]
        public Orientation Orientation { get; set; }

        [JsonProperty("insets")]
        public Insets Insets { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }
    }

    public partial class Insets
    {
        [JsonProperty("left")]
        public long Left { get; set; }

        [JsonProperty("top")]
        public long Top { get; set; }

        [JsonProperty("right")]
        public long Right { get; set; }

        [JsonProperty("bottom")]
        public long Bottom { get; set; }
    }

    public partial class Screen
    {
        [JsonProperty("horizontal")]
        public Horizontal Horizontal { get; set; }

        [JsonProperty("device-pixel-ratio")]
        public double DevicePixelRatio { get; set; }

        [JsonProperty("vertical")]
        public Horizontal Vertical { get; set; }
    }

    public partial class Horizontal
    {
        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("outline", NullValueHandling = NullValueHandling.Ignore)]
        public Outline Outline { get; set; }
    }

    public partial class Outline
    {
        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("insets")]
        public Insets Insets { get; set; }
    }

    public enum Capability { Mobile, Touch };

    public enum Orientation { Horizontal, Vertical };

    public enum Title { Default, Keyboard, NavigationBar };

    public enum DeviceType { Notebook, Phone, Tablet };

    public enum WelcomeType { EmulatedDevice };

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, ParseJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, ParseJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeConverter.Singleton,
                OrientationConverter.Singleton,
                TitleConverter.Singleton,
                DeviceTypeConverter.Singleton,
                //WelcomeTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeConverter : JsonConverter
    {
        //public override bool CanConvert(Type t) => t == typeof(Capability) || t == typeof(Capability?);
        public override bool CanConvert(Type t) => t == typeof(Capability) || t == typeof(Capability?) ||
            t == typeof(Orientation) || t == typeof(Orientation?) || t == typeof(Title) || t == typeof(Title?) ||
            t == typeof(DeviceType) || t == typeof(DeviceType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Mobile":
                case "mobile":
                    return Capability.Mobile;
                case "Touch":
                case "touch":
                    return Capability.Touch;
                case "Horizontal":
                case "horizontal":
                    return Orientation.Horizontal;
                case "Vertical":
                case "vertical":
                    return Orientation.Vertical;
                case "Default":
                case "default":
                    return Title.Default;
                case "Keyboard":
                case "keyboard":
                    return Title.Keyboard;
                case "Navigation bar":
                case "navigation bar":
                    return Title.NavigationBar;
                case "Notebook":
                case "notebook":
                    return DeviceType.Notebook;
                case "Phone":
                case "phone":
                    return DeviceType.Phone;
                case "Tablet":
                case "tablet":
                    return DeviceType.Tablet;
            }
            throw new Exception("Cannot unmarshal type TypeConverter");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Capability)untypedValue;
            switch (value)
            {
                case Capability.Mobile:
                    serializer.Serialize(writer, "mobile");
                    return;
                case Capability.Touch:
                    serializer.Serialize(writer, "touch");
                    return;
            }
            throw new Exception("Cannot marshal type Capability");
        }

        public static readonly TypeConverter Singleton = new TypeConverter();
    }

    internal class OrientationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Orientation) || t == typeof(Orientation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "horizontal":
                    return Orientation.Horizontal;
                case "vertical":
                    return Orientation.Vertical;
            }
            throw new Exception("Cannot unmarshal type Orientation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Orientation)untypedValue;
            switch (value)
            {
                case Orientation.Horizontal:
                    serializer.Serialize(writer, "horizontal");
                    return;
                case Orientation.Vertical:
                    serializer.Serialize(writer, "vertical");
                    return;
            }
            throw new Exception("Cannot marshal type Orientation");
        }

        public static readonly OrientationConverter Singleton = new OrientationConverter();
    }

    internal class TitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Title) || t == typeof(Title?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "default":
                    return Title.Default;
                case "keyboard":
                    return Title.Keyboard;
                case "navigation bar":
                    return Title.NavigationBar;
            }
            throw new Exception("Cannot unmarshal type Title");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Title)untypedValue;
            switch (value)
            {
                case Title.Default:
                    serializer.Serialize(writer, "default");
                    return;
                case Title.Keyboard:
                    serializer.Serialize(writer, "keyboard");
                    return;
                case Title.NavigationBar:
                    serializer.Serialize(writer, "navigation bar");
                    return;
            }
            throw new Exception("Cannot marshal type Title");
        }

        public static readonly TitleConverter Singleton = new TitleConverter();
    }

    internal class DeviceTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DeviceType) || t == typeof(DeviceType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "notebook":
                    return DeviceType.Notebook;
                case "phone":
                    return DeviceType.Phone;
                case "tablet":
                    return DeviceType.Tablet;
            }
            throw new Exception("Cannot unmarshal type DeviceType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DeviceType)untypedValue;
            switch (value)
            {
                case DeviceType.Notebook:
                    serializer.Serialize(writer, "notebook");
                    return;
                case DeviceType.Phone:
                    serializer.Serialize(writer, "phone");
                    return;
                case DeviceType.Tablet:
                    serializer.Serialize(writer, "tablet");
                    return;
            }
            throw new Exception("Cannot marshal type DeviceType");
        }

        public static readonly DeviceTypeConverter Singleton = new DeviceTypeConverter();
    }

    internal class WelcomeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WelcomeType) || t == typeof(WelcomeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "emulated-device")
            {
                return WelcomeType.EmulatedDevice;
            }
            throw new Exception("Cannot unmarshal type WelcomeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WelcomeType)untypedValue;
            if (value == WelcomeType.EmulatedDevice)
            {
                serializer.Serialize(writer, "emulated-device");
                return;
            }
            throw new Exception("Cannot marshal type WelcomeType");
        }

        public static readonly WelcomeTypeConverter Singleton = new WelcomeTypeConverter();
    }
}
